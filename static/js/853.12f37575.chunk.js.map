{"version":3,"file":"static/js/853.12f37575.chunk.js","mappings":"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","sources":["redux/contacts.selector.js","components/FormContact/FormContact.js","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/icons/src/Delete.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","components/ContactListItem/ContactListItem.js","components/ErrorMessage/ErrorMessage.js","components/ContactList/ContactList.js","components/SearchFilter/SearchFilter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n[ selectContacts, selectFilter],\n (contacts, filter) => {\n   return contacts.filter(contact => contact.name.toLowerCase()\n    .includes(filter.toLowerCase()))\n }\n)","import { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { addContacts } from 'redux/contactsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts.selector';\nimport {\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n  Box,\n} from '@chakra-ui/react';\n\nexport const FormContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string()\n        .matches(/^[a-zA-Z\\s]+$/, 'Будь-ласка введіть латинські літери')\n        .required(`Обов'язкове поле`),\n      number: Yup.string()\n        .min(5, 'Не менше 5-ти символів')\n        .matches(\n          /^[0-9\\-+']+$/,\n          'Будь-ласка введіть за прикладом 063-123-45-67'\n        )\n        .required(`Обов'язкове поле`),\n    }),\n    onSubmit: (values, actions) => {\n      const check = contacts.some(({ name }) => name === values.name);\n      if (check) {\n        alert.error(`${values.name} вже доданий до контактів`);\n        return;\n      }\n      const newContact = {\n        name: values.name,\n        number: values.number,\n      };\n      dispatch(addContacts(newContact));\n      actions.resetForm();\n    },\n  });\n  return (\n    <Flex justify=\"center\" paddingTop={'175px'} marginBottom={'30px'}>\n      <Box p={5} rounded=\"md\" bgColor=\"rgba(0, 0, 0, 0.55)\">\n        <form onSubmit={formik.handleSubmit}>\n          <VStack spacing={5}>\n            <FormControl isInvalid={formik.touched.name && formik.errors.name}>\n              <FormLabel htmlFor=\"name\" color={'white'}>\n                Ім'я та прізвище\n              </FormLabel>\n              <Input\n                name=\"name\"\n                id=\"name\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.name}\n                color={'white'}\n                _placeholder={{ color: 'smokewhite' }}\n                placeholder=\"Введіть ім'я та прізвище\"\n                width={450}\n              />\n              <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n            </FormControl>\n\n            <FormControl\n              isInvalid={formik.touched.number && formik.errors.number}\n            >\n              <FormLabel htmlFor=\"number\" color={'white'}>\n                Номер телефону\n              </FormLabel>\n              <Input\n                name=\"number\"\n                id=\"number\"\n                type=\"tel\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.number}\n                color={'white'}\n                _placeholder={{ color: 'smokewhite' }}\n                placeholder=\"Введіть номер телефону\"\n              />\n              <FormErrorMessage>{formik.errors.number}</FormErrorMessage>\n            </FormControl>\n            <Button\n              type=\"submit\"\n              bgColor=\"rgb(34,139,34,0.85)\"\n              color=\"white\"\n              _hover={{ bg: 'green' }}\n              marginBottom={'15px'}\n            >\n              Додати контакт\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n};\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" />\n    </g>\n  ),\n})\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contactsSlice';\nimport { Box, Button, Card, CardBody, Text } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nexport const ContactListItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  return (\n    <Card as=\"li\" w=\"40%\" bg=\"rgba(0, 0, 0, 0.6)\">\n      <CardBody\n        display=\"flex\"\n        justifyContent=\"space-around\"\n        gap={'20px'}\n        alignItems=\"center\"\n      >\n        <Text color=\"white\" fontWeight=\"500\" fontSize={20}>\n          {name}:\n        </Text>\n        <Box display=\"flex\" gap={7}>\n          <Text color=\"white\" fontWeight=\"500\" fontSize={20}>\n            {number}\n          </Text>\n          <Button\n            type=\"button\"\n            onClick={() => dispatch(deleteContacts(id))}\n            colorScheme=\"green\"\n            _hover={{ bg: 'red' }}\n          >\n            <DeleteIcon />\n          </Button>\n        </Box>\n      </CardBody>\n    </Card>\n  );\n};\n","import { Text } from \"@chakra-ui/react\"\n\n\nexport const ErrorMsg = () => {\n    return (\n        <Text color='red' fontWeight='700'>Whoops! Error! Please reload this page!</Text>\n    )\n}","import { ContactListItem } from \"components/ContactListItem/ContactListItem\";\nimport { useSelector } from \"react-redux\";\nimport { selectVisibleContacts, selectIsLoading, selectError } from \"redux/contacts.selector\";\nimport { Loader } from \"components/Loader\";\nimport { ErrorMsg } from \"components/ErrorMessage/ErrorMessage\";\nimport { Container, Flex } from \"@chakra-ui/react\";\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectVisibleContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    return (\n        <Container maxW='1280px'>\n            <Flex as='ul' flexDirection='column' alignItems='center' mb={4} mt={4} gap={4}>\n            {isLoading && <Loader />}\n            {error && <ErrorMsg />}\n            {contacts.map(contact => {\n                return (\n                    <ContactListItem\n                        key={contact.id}\n                        contact={contact}/>   \n                )\n            })}\n            </Flex>\n        </Container>\n    )\n}","import { useDispatch, useSelector } from 'react-redux';\nimport { ChangeFilter } from 'redux/filterSlice';\nimport { Box, Input } from '@chakra-ui/react';\n\nexport const SearchFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n  return (\n    <Box textAlign=\"center\">\n      <Input\n        type=\"text\"\n        w={300}\n        bg=\"rgba(0, 0, 0, 0.55)\"\n        border={'transparent'}\n        color={'white'}\n        _placeholder={{ color: 'white' }}\n        marginBottom={'30px'}\n        value={filter}\n        onChange={evt => dispatch(ChangeFilter(evt.target.value))}\n        placeholder=\"Пошук за ім'ям\"\n      />\n    </Box>\n  );\n};\n","import { FormContact } from 'components/FormContact/FormContact';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { SearchFilter } from 'components/SearchFilter/SearchFilter';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactsSlice';\n\nimport { Box } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      bgImage=\"url('https://images5.alphacoders.com/456/456536.jpg')\"\n      bgRepeat={'no-repeat'}\n      bgSize={'cover'}\n      align=\"center\"\n      justify=\"center\"\n      height=\"150vh\"\n      position={'relative'}\n      top={'-150'}\n    >\n      <FormContact />\n      <SearchFilter />\n      <ContactList />\n    </Box>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","FormContact","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","number","validationSchema","Yup","shape","matches","required","min","onSubmit","values","actions","some","_ref","alert","concat","newContact","addContacts","resetForm","_jsx","Flex","justify","paddingTop","marginBottom","children","Box","p","rounded","bgColor","handleSubmit","_jsxs","VStack","spacing","FormControl","isInvalid","touched","errors","FormLabel","htmlFor","color","Input","id","type","onChange","handleChange","onBlur","handleBlur","value","_placeholder","placeholder","width","FormErrorMessage","Button","_hover","bg","createStylesContext","_createStylesContext2","CardStylesProvider","useCardStyles","Card","forwardRef","props","ref","omitThemingProps","className","_omitThemingProps$dir","direction","align","rest","styles","useMultiStyleConfig","chakra","div","cx","__css","display","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","CardBody","body","DeleteIcon","options","viewBox","pathDefinition","d","displayName","_options$defaultProps","defaultProps","path","Children","Comp","Icon","length","fill","createIcon","ContactListItem","_ref$contact","as","w","gap","Text","fontWeight","fontSize","onClick","deleteContacts","colorScheme","ErrorMsg","ContactList","Container","maxW","mb","mt","Loader","map","SearchFilter","textAlign","border","evt","ChangeFilter","target","Contacts","useEffect","fetchContacts","bgImage","bgRepeat","bgSize","height","top"],"sourceRoot":""}